variables:
  CATCH2_VERSION: 3.5.1
  PYBIND11_VERSION: 2.10.4

workflow:
  name: $PIPELINE_NAME
  rules:
    # Allow tag pipelines to run for *.*.* tags, i.e. 1.0.0, not v1.0.0
    # these are configured to be protected
    - if: >
        $CI_COMMIT_TAG =~ '/^[0-9]+.[0-9]+.[0-9]+$/'
        && $CI_COMMIT_REF_PROTECTED == "true"
      variables:
        PIPELINE_NAME: Release Pipeline for $CI_COMMIT_TAG
    # Allow MR pipelines to be run automatically
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true"
      variables:
        PIPELINE_NAME: Merge Request Pipeline for $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    # Never run branch pipelines if an MR exists for branch
    - if: >
        $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
        && $CI_PIPELINE_SOURCE == "push"
      when: never
    # Allow builds on protected branches
    - if: $CI_COMMIT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"
      variables:
        PIPELINE_NAME: Build Pipeline for $CI_COMMIT_BRANCH
    # Allow feature pipelines to be triggered manually via the UI
    - if: $CI_COMMIT_BRANCH && $CI_PIPELINE_SOURCE == "web"
      variables:
        PIPELINE_NAME: Build Pipeline for $CI_COMMIT_BRANCH

stages:
  - lint
  - build
  - unit-test
  - integration-test
  - publish
  - release


.template: &template
  tags:
    - docker
  before_script:
    - echo "Installing potential dependencies..."

    - git clone -b v$PYBIND11_VERSION https://github.com/pybind/pybind11.git
    - cd pybind11
    - mkdir build
    - cd build
    - cmake -DBUILD_TESTING=OFF -DPYBIND11_FINDPYTHON=ON ..
    - sudo make install
    - cd ../..

    - git clone -b v$CATCH2_VERSION https://github.com/catchorg/Catch2.git
    - cd Catch2
    - mkdir build
    - cd build
    - cmake -DBUILD_TESTING=OFF ..
    - sudo make install
    - cd ../..
  script:
    - cmake -E make_directory build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -DBUILD_DOCS=OFF ..
    - cmake --build .
    - ctest

lint-job:
  image: python:3.12
  stage: lint
  tags:
    - docker
  script:
    - echo "Starting lint job..."
    - pip install ruff
    - ruff check --output-format=gitlab > code-quality-report.json
  artifacts:
    reports:
      codequality: $CI_PROJECT_DIR/code-quality-report.json

build-job:
  image: python:3.12
  stage: build
  tags:
    - docker
  script:
    - echo "Starting build job..."

build-and-test:clang:
  image: conanio/clang10
  stage: build
  tags:
    - docker
  <<: *template
  artifacts:
    when: on_failure
    paths:
      - '**/CMakeOutput.log'

unit-test-job:
  image: python:3.12
  stage: unit-test
  tags:
    - docker
  script:
    - echo "Starting unit-test job..."

generate-coverage-report:
  image: conanio/gcc7
  stage: unit-test
  tags:
    - docker
  <<: *template
  script:
    - sudo apt-get update
    - sudo apt-get install -yy lcov
    - cmake -E make_directory build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS="--coverage" -DBUILD_DOCS=OFF ..
    - cmake --build .
    - ctest
    - cd ..
    - lcov --directory ./build --capture --output-file coverage.info
    - bash <(curl --connect-timeout 10 --retry 5 -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

integration-test-job:
  image: python:3.12
  stage: integration-test
  tags:
    - docker
  script:
    - echo "Starting integration-test job..."

publish-job:
  image: python:3.12
  stage: publish
  tags:
    - docker
  script:
    - echo "Starting publish job..."

release-job:
  image: python:3.12
  stage: release
  tags:
    - docker
  script:
    - echo "Starting release job"
